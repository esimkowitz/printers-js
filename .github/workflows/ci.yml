name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    permissions: {}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      # Speed up apt-get operations by disabling unnecessary man-db auto-update
      - name: Disable man-db auto-update
        run: |
          echo "man-db man-db/auto-update boolean false" | sudo debconf-set-selections
          sudo rm -f /var/lib/man-db/auto-update

      # Install system dependencies for Linux printing
      - name: Install CUPS development libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y libcups2-dev pkg-config clang

      # Setup Rust toolchain for building native library
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      # Cache Rust dependencies for faster builds
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ runner.os }}-rust

      # Setup Deno
      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x # Run with latest stable Deno.

      # Setup Node.js for N-API module and testing
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: "20"
          cache: "npm"

      - name: Install NAPI-RS CLI
        run: npm install -g @napi-rs/cli

      # Setup Bun for cross-runtime testing
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Task runner
        uses: go-task/setup-task@v1

      # Code quality checks (continue on error to gather all results)
      - name: Check Rust formatting
        id: rust-fmt
        run: task fmt:rust:check
        continue-on-error: true

      - name: Run Rust linter (Clippy)
        id: rust-lint
        run: task lint:rust
        continue-on-error: true

      - name: Check TypeScript/JavaScript formatting
        id: prettier-fmt
        run: task fmt:prettier:check
        continue-on-error: true

      # Install Node.js dependencies
      - name: Install Node.js dependencies
        run: npm install

      - name: Run ESLint
        id: eslint
        run: task lint:eslint
        continue-on-error: true

      # Save code quality results for reporting
      - name: Save code quality results
        if: always()
        run: |
          mkdir -p code-quality-results
          echo '{
            "rust_fmt": "${{ steps.rust-fmt.outcome }}",
            "rust_lint": "${{ steps.rust-lint.outcome }}",
            "prettier_fmt": "${{ steps.prettier-fmt.outcome }}",
            "eslint": "${{ steps.eslint.outcome }}"
          }' > code-quality-results/results.json

      - name: Upload code quality results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-results
          path: code-quality-results/
          if-no-files-found: ignore

  build-and-test:
    name: Build and Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: Linux
          - os: macos-latest
            name: macOS
          - os: windows-latest
            name: Windows
    env:
      PRINTERS_JS_SIMULATE: true # Force simulation mode for all tests
      CARGO_TERM_COLOR: always
    permissions: {}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      # Linux-specific setup
      - name: Disable man-db auto-update and install CUPS libraries (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "man-db man-db/auto-update boolean false" | sudo debconf-set-selections
          sudo rm -f /var/lib/man-db/auto-update
          sudo apt-get update
          sudo apt-get install -y libcups2-dev pkg-config clang

      # Setup Rust toolchain for building native library
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      # Cache Rust dependencies for faster builds
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.os }}-rust

      # Install cargo-llvm-cov for code coverage
      # Note: Coverage artifacts only generated for Linux to avoid duplicates
      - name: Install cargo-llvm-cov (Linux only)
        if: runner.os == 'Linux'
        uses: taiki-e/install-action@cargo-llvm-cov

      # Setup Deno
      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      # Setup Bun
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Task runhner
        uses: go-task/setup-task@v1

      # Setup Node.js
      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: 20

      # Install Node.js dependencies
      - name: Install Node.js dependencies
        run: npm install

      # Build all runtime libraries (includes compilation)
      - name: Build all runtime libraries
        run: task build

      # Run comprehensive cross-runtime tests (includes Rust, Deno, Node.js, Bun)
      # This generates JUnit XML and LCOV coverage for all runtimes
      - name: Run cross-runtime tests
        id: cross-runtime-tests
        run: task test

      - name: Upload Test Reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.name }}
          path: test-results/*.xml
          if-no-files-found: ignore

      - name: Upload Coverage Reports (Linux only)
        if: ${{ always() && runner.os == 'Linux' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: test-results/coverage/*
          if-no-files-found: ignore
