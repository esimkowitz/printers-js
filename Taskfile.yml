version: "3"

vars:
  SIMULATE: PRINTERS_JS_SIMULATE=true

tasks:
  dev:
    desc: Run development server with file watching
    cmd: deno run --allow-env --watch src/index.ts

  compile:
    desc: Compile TypeScript to JavaScript with declarations
    cmd: node scripts/compile.js

  build:
    desc: Build N-API module and compile TypeScript
    deps: [compile]
    cmd: node scripts/build-all.js

  build:napi:
    desc: Build N-API module for Node.js
    cmd: node scripts/build-napi.js --release

  test:
    desc: Run comprehensive test suite across all runtimes
    cmd: node scripts/test-runtimes.js {{.CLI_ARGS}}

  test:real:
    desc: Run comprehensive test suite with real printing (not recommended)
    cmd: PRINTERS_JS_SIMULATE=false task test

  test:rust:
    desc: Run only Rust tests
    cmd: task test -- rust

  test:js:
    desc: Run only JavaScript runtime tests (Deno, Node.js, Bun)
    cmd: task test -- deno node bun

  test:deno:
    desc: Run Deno tests in simulation mode
    cmd: "{{.SIMULATE}} task test:deno:real"

  test:deno:real:
    desc: Run Deno tests with real printing
    cmd: task test -- deno

  test:doc:
    desc: Run documentation tests
    cmd: deno test --doc --allow-env src/index.ts

  test:node:
    desc: Run Node.js tests in simulation mode
    cmd: "{{.SIMULATE}} task test:node:real"

  test:node:real:
    desc: Run Node.js tests with real printing
    cmd: task test -- node

  test:bun:
    desc: Run Bun tests in simulation mode
    cmd: "{{.SIMULATE}} task test:bun:real"

  test:bun:real:
    desc: Run Bun tests with real printing
    cmd: task test -- bun

  lint:
    desc: Lint all code
    deps: [lint:eslint, lint:rust]

  lint:eslint:
    desc: Lint TypeScript/JavaScript files
    cmd: npx eslint .

  lint:rust:
    desc: Lint Rust code with Clippy
    cmd: cargo clippy -- -D warnings

  lint:fix:
    desc: Fix linting issues in all code
    cmd: npx eslint . --fix

  remove-env-check:
    desc: Remove NAPI_RS_NATIVE_LIBRARY_PATH check from generated N-API files
    cmd: node scripts/remove-env-check.js

  prepublish:
    desc: Prepare and publish packages
    cmds:
      # Update main package.json with optionalDependencies but don't publish platform packages
      - npx napi prepublish -t npm --no-gh-release --skip-optional-publish
      # Now publish platform packages with our custom script that preserves ESM files
      - node scripts/publish-platform-packages.js

  prepublish:dry:
    desc: Prepare package for publishing (dry run)
    cmd: npx napi prepublish -t npm --dry-run

  fmt:
    desc: Format all code
    deps: [fmt:prettier, fmt:rust]

  fmt:check:
    desc: Check formatting for all code
    deps: [fmt:prettier:check, fmt:rust:check]

  fmt:prettier:
    desc: Format TypeScript/JavaScript with Prettier
    cmd: npx prettier --write .

  fmt:prettier:check:
    desc: Check TypeScript/JavaScript formatting with Prettier
    cmd: npx prettier --check .

  fmt:rust:
    desc: Format Rust code
    cmd: cargo fmt

  fmt:rust:check:
    desc: Check Rust code formatting
    cmd: cargo fmt --check

  check:
    desc: Type check all code
    deps: [check:typescript, check:rust]

  check:typescript:
    desc: Type check TypeScript code
    cmd: npx tsc --noEmit

  check:node:
    desc: Type check Node.js code (via build)
    cmd: task build:napi

  check:rust:
    desc: Type check Rust code (via build)
    cmd: cargo check --all-features --workspace

  bump:patch:
    desc: Bump patch version
    cmd: node scripts/bump-version.js patch

  bump:minor:
    desc: Bump minor version
    cmd: node scripts/bump-version.js minor

  bump:major:
    desc: Bump major version
    cmd: node scripts/bump-version.js major

  docs:
    desc: Generate documentation
    cmd: deno doc --html --name="@printers/printers" src/index.ts

  docs:serve:
    desc: Serve documentation locally
    cmd: deno doc --serve --name="@printers/printers" src/index.ts

  ci:local:
    desc: Run CI locally with nektos/act
    cmd: node scripts/run-ci-local.js
