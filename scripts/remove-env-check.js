#!/usr/bin/env node

/**
 * Post-build script to replace NAPI-RS generated loader with a minimal,
 * security-friendly version.
 *
 * This eliminates Socket.dev security concerns:
 * - Removes shell access (child_process.execSync)
 * - Removes filesystem reads (/usr/bin/ldd)
 * - Removes environment variable checks (NAPI_RS_ENFORCE_VERSION_CHECK)
 * - Removes musl detection (only supporting gnu targets)
 */

import { existsSync, readFileSync, writeFileSync, readdirSync } from "fs";
import { dirname, join } from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Support --dir parameter for custom directory, or process all platforms
const dirArg = process.argv.find(arg => arg.startsWith("--dir="));
const customDir = dirArg ? dirArg.split("=")[1] : null;

function getIndexPaths() {
  if (customDir) {
    return [join(__dirname, "..", customDir, "index.js")];
  }

  // Process all platform directories in npm/
  const npmDir = join(__dirname, "..", "npm");
  if (!existsSync(npmDir)) {
    return [];
  }

  const platforms = readdirSync(npmDir, { withFileTypes: true })
    .filter(dirent => dirent.isDirectory())
    .map(dirent => dirent.name);

  return platforms.map(platform => join(npmDir, platform, "index.js"));
}

/**
 * Extract exported symbols from the original generated file
 */
function extractExports(content) {
  const exportMatch = content.match(/const\s*\{([^}]+)\}\s*=\s*nativeBinding/);
  if (!exportMatch) return null;

  const symbols = exportMatch[1]
    .split(",")
    .map(s => s.trim())
    .filter(Boolean);

  return symbols;
}

/**
 * Generate a minimal, secure loader for the platform package
 */
function generateMinimalLoader(platform, exports) {
  const binaryName = `printers.${platform}.node`;

  return `// prettier-ignore
/* eslint-disable */
/* Minimal secure loader - generated by remove-env-check.js */

import { createRequire } from 'node:module'
const require = createRequire(import.meta.url)

let nativeBinding = null

try {
  nativeBinding = require('./${binaryName}')
} catch (localErr) {
  try {
    nativeBinding = require('@printers/printers-${platform}')
  } catch (packageErr) {
    throw new Error(
      \`Failed to load native binding for ${platform}. \` +
      \`Please try reinstalling the package.\`,
      { cause: [localErr, packageErr] }
    )
  }
}

const { ${exports.join(", ")} } = nativeBinding
${exports.map(sym => `export { ${sym} }`).join("\n")}
`;
}

function processIndexFile(indexPath) {
  if (!existsSync(indexPath)) {
    console.log(`⚠️ ${indexPath} not found - skipping`);
    return false;
  }

  try {
    const content = readFileSync(indexPath, "utf-8");

    // Extract platform from path (e.g., "darwin-arm64" from "npm/darwin-arm64/index.js")
    const platformMatch = indexPath.match(/npm[/\\]([^/\\]+)[/\\]index\.js/);
    if (!platformMatch) {
      console.log(`⚠️ Could not extract platform from ${indexPath}`);
      return false;
    }
    const platform = platformMatch[1];

    // Extract exported symbols
    const exports = extractExports(content);
    if (!exports) {
      console.log(`⚠️ Could not extract exports from ${indexPath}`);
      return false;
    }

    // Generate minimal loader
    const minimalContent = generateMinimalLoader(platform, exports);

    writeFileSync(indexPath, minimalContent);
    console.log(`✅ Replaced loader with minimal version: ${indexPath}`);
    return true;
  } catch (error) {
    console.error(`❌ Error processing ${indexPath}:`, error);
    throw error;
  }
}

const indexPaths = getIndexPaths();

try {
  if (indexPaths.length === 0) {
    console.log("⚠️ No npm platform directories found");
    process.exit(0);
  }

  let processedCount = 0;
  let modifiedCount = 0;

  for (const indexPath of indexPaths) {
    processedCount++;
    if (processIndexFile(indexPath)) {
      modifiedCount++;
    }
  }

  console.log(
    `   Processed ${processedCount} platform(s), modified ${modifiedCount} file(s)`
  );
} catch (error) {
  console.error("❌ Error processing index files:", error);
  process.exit(1);
}
